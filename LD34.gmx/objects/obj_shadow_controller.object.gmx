<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface = surface_create(room_width, room_height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_set_target(surface);
draw_clear_alpha(0, 0);

draw_set_blend_mode_ext(bm_one, bm_zero);

with (obj_shadow_parent)
{
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_black, image_alpha);
}

//Torch Light Level//

if global.health &lt;=0{
    with (obj_torch)
    { 
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_black, image_alpha);;
    }}

if global.health = 1{

    draw_set_blend_mode(bm_subtract);
    with (obj_torch)
    {
        draw_circle_colour(x,y,random_range(80, 83),c_white,c_black,false);  
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_black, image_alpha);
    }
}

if global.health = 2{

    draw_set_blend_mode(bm_subtract);
    with (obj_torch)
    {
        draw_circle_colour(x,y,random_range(115, 117),c_white,c_black,false);  
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_black, image_alpha);
    }
}

if global.health = 3{

    draw_set_blend_mode(bm_subtract);
    with (obj_torch)
    {
        draw_circle_colour(x,y,random_range(150, 152),c_white,c_black,false);  
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_black, image_alpha);
    }
}

if global.health = 4{

    draw_set_blend_mode(bm_subtract);
    with (obj_torch)
    {
        draw_circle_colour(x,y,random_range(195, 198),c_white,c_black,false);  
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_black, image_alpha);
    }
}

if global.health = 5{

    draw_set_blend_mode(bm_subtract);
    with (obj_torch)
    {
        draw_circle_colour(x,y,random_range(235, 237),c_white,c_black,false);  
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_black, image_alpha);
    }
}

if global.health = 6{

    draw_set_blend_mode(bm_subtract);
    with (obj_torch)
    {
        draw_circle_colour(x,y,random_range(265, 268),c_white,c_black,false);  
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_black, image_alpha);
    }
}

if global.health = 7{

    draw_set_blend_mode(bm_subtract);
    with (obj_torch)
    {
        draw_circle_colour(x,y,random_range(295, 297),c_white,c_black,false);  
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_black, image_alpha);
    }
}

if global.health = 8{

    draw_set_blend_mode(bm_subtract);
    with (obj_torch)
    {
        draw_circle_colour(x,y,random_range(335, 338),c_white,c_black,false);  
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_black, image_alpha);
    }
}

if global.health = 9{

    draw_set_blend_mode(bm_subtract);
    with (obj_torch)
    {
        draw_circle_colour(x,y,random_range(375, 377),c_white,c_black,false);  
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_blue, image_alpha);
    }
}
if global.health &gt;= 10{

    draw_set_blend_mode(bm_subtract);
    with (obj_torch)
    {
        draw_circle_colour(x,y,random_range(475, 477),c_white,c_black,false);  
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_blue, image_alpha);
    }
}

//Pickup Light Level//
draw_set_blend_mode(bm_subtract);
{
    with (obj_pickup_light)
    {
        draw_circle_colour(x,y,random_range(80, 83),c_white,c_black,false);  
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_blue, image_alpha);
    }
}

//--//

    
draw_set_blend_mode (bm_normal);
surface_reset_target();
    

draw_surface (surface, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
